name: CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff types-jsonschema types-python-jose
    - name: Lint with ruff
      run: ruff check . --fix
    - name: Check formatting
      run: ruff format --check .

  type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    env:
      AWX_BASE_URL: dummy
      AWX_TOKEN: dummy
      LLM_ENDPOINT: dummy
      LLM_MODEL: dummy
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-jsonschema types-python-jose
    - name: Type-check with mypy
      run: mypy --explicit-package-bases --ignore-missing-imports app

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    - name: Run safety scan
      run: safety scan --exit-code || true  # Continue even if vulnerabilities found
    - name: Run bandit security scan
      run: bandit -r app/ -f json -o bandit-report.json || true
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    env:
      AWX_BASE_URL: dummy
      AWX_TOKEN: dummy
      LLM_ENDPOINT: dummy
      LLM_MODEL: dummy
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    - name: Run tests with coverage
      run: pytest --cov=app --cov-report=xml --cov-report=term-missing
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, security-scan]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Build Docker image
      run: docker compose build
    - name: Test Docker image
      run: |
        docker compose up -d
        sleep 10
        curl -f http://localhost:8001/health || exit 1
        docker compose down
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  push:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [push]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    - name: Update deployment image
      run: |
        # Update the deployment with the new image
        sed -i "s|image: ghcr.io/.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g" k8s/deployment.yaml
        kubectl apply -f k8s/
        kubectl rollout status deployment/awx-advanced-tools
    - name: Verify deployment
      run: |
        kubectl get pods -l app=awx-advanced-tools
        kubectl port-forward svc/awx-advanced-tools 8001:80 &
        sleep 10
        curl -f http://localhost:8001/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [push]
    if: github.event_name == 'release'
    environment: production
    steps:
    - uses: actions/checkout@v4
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    - name: Update deployment image
      run: |
        # Update the deployment with the new image
        sed -i "s|image: ghcr.io/.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}|g" k8s/deployment.yaml
        kubectl apply -f k8s/
        kubectl rollout status deployment/awx-advanced-tools
    - name: Verify deployment
      run: |
        kubectl get pods -l app=awx-advanced-tools
        kubectl port-forward svc/awx-advanced-tools 8001:80 &
        sleep 10
        curl -f http://localhost:8001/health || exit 1

  release:
    runs-on: ubuntu-latest
    needs: [push]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.release.tag_name }}
        release_name: Release ${{ github.event.release.tag_name }}
        body: |
          Automated release for version ${{ github.event.release.tag_name }}

          ## Changes
          - CI/CD pipeline improvements
          - Enhanced security scanning
          - Multi-Python version support
          - Kubernetes deployment automation

          ## Docker Image
          - Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          - Tag: ${{ github.event.release.tag_name }}
        draft: false
        prerelease: false